const { app, BrowserWindow, ipcMain, dialog, Menu } = require('electron');
const { autoUpdater } = require("electron-updater");
//const log = require("electron-log");
const path = require('path')
const url = require('url')
let mainWindow;

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ %appdata%/your-app/logs/)
//log.transports.file.level = "info";
//autoUpdater.logger = log;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
app.whenReady().then(() => {
  checkForUpdates();
});
// üîπ –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
function checkForUpdates() {
  autoUpdater.autoDownload = false; // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º
  autoUpdater.checkForUpdates();

  autoUpdater.on("update-not-available", () => {
    dialog.showMessageBox(mainWindow, {
      type: "info",
      title: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
      message: "–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!",
      buttons: ["–û–∫–µ–π"],
    });
  });

  autoUpdater.on("update-available", (info) => {
    dialog
      .showMessageBox(mainWindow, {
        type: "info",
        title: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ",
        message: `–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: ${info.version}. –•–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å?`,
        buttons: ["–î–∞", "–ù–µ—Ç"],
      })
      .then((result) => {
        if (result.response === 0) {
          autoUpdater.downloadUpdate();
        }
      });
  });

  autoUpdater.on("update-downloaded", () => {
    dialog
      .showMessageBox(mainWindow, {
        type: "info",
        title: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ",
        message: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?",
        buttons: ["–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", "–ü–æ–∑–∂–µ"],
      })
      .then((result) => {
        if (result.response === 0) {
          autoUpdater.quitAndInstall();
        }
      });
  });

  autoUpdater.on("error", (err) => {
    dialog.showErrorBox("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", err.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
  });
}


// üîπ –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é
function createMenu() {
  const menu = Menu.buildFromTemplate([
    {
      label: "File",
      submenu: [
        { label: "–í—ã—Ö–æ–¥", role: "quit" },
      ],
    },
    {
      label: "Help",
      submenu: [
        {
          label: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
          click: () => {
            checkForUpdates();
          },
        },
        { type: "separator" },
        { label: "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", role: "about" },
      ],
    },
  ]);

  Menu.setApplicationMenu(menu);
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
function createWindow() {
  mainWindow = new BrowserWindow({
    width: 1920,
    height: 1080,
    webPreferences: {
      nodeIntegration: true,  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
      contextIsolation: false, // –û–∫—Ä—É–∂–µ–Ω–∏–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–æ
      preload: path.join(__dirname, 'preload.js')
      }
  });
  mainWindow.webContents.openDevTools()
    mainWindow.loadURL(url.format({
        pathname: path.join(__dirname, 'index.html'),
        protocol: 'file:',
        slashes: true
  }))
  mainWindow.on('closed', function() {
    mainWindow = null
  })
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  checkForUpdates();
  createMenu();
  //autoUpdater.checkForUpdatesAndNotify(); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
}
app.on('ready', createWindow)
app.on('window-all-closed', function() {
  app.quit()
})

app.on('activate', function() {
  if (mainWindow === null) {
      createWindow()
  }
})


